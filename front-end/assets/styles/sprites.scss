// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$bag-name: 'bag';
$bag-x: 0px;
$bag-y: 51px;
$bag-offset-x: 0px;
$bag-offset-y: -51px;
$bag-width: 21px;
$bag-height: 21px;
$bag-total-width: 138px;
$bag-total-height: 72px;
$bag-image: '../images/spritesheet.png';
$bag: (0px, 51px, 0px, -51px, 21px, 21px, 138px, 72px, '../images/spritesheet.png', 'bag', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 0px;
$logo-offset-x: 0px;
$logo-offset-y: 0px;
$logo-width: 138px;
$logo-height: 51px;
$logo-total-width: 138px;
$logo-total-height: 72px;
$logo-image: '../images/spritesheet.png';
$logo: (0px, 0px, 0px, 0px, 138px, 51px, 138px, 72px, '../images/spritesheet.png', 'logo', );
$menu-name: 'menu';
$menu-x: 21px;
$menu-y: 51px;
$menu-offset-x: -21px;
$menu-offset-y: -51px;
$menu-width: 18px;
$menu-height: 16px;
$menu-total-width: 138px;
$menu-total-height: 72px;
$menu-image: '../images/spritesheet.png';
$menu: (21px, 51px, -21px, -51px, 18px, 16px, 138px, 72px, '../images/spritesheet.png', 'menu', );
$search-name: 'search';
$search-x: 39px;
$search-y: 51px;
$search-offset-x: -39px;
$search-offset-y: -51px;
$search-width: 15px;
$search-height: 14px;
$search-total-width: 138px;
$search-total-height: 72px;
$search-image: '../images/spritesheet.png';
$search: (39px, 51px, -39px, -51px, 15px, 14px, 138px, 72px, '../images/spritesheet.png', 'search', );
$spritesheet-width: 138px;
$spritesheet-height: 72px;
$spritesheet-image: '../images/spritesheet.png';
$spritesheet-sprites: ($bag, $logo, $menu, $search, );
$spritesheet: (138px, 72px, '../images/spritesheet.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
